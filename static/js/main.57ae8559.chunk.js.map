{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["StarWars","loadedCharacter","setLoadedCharacter","useState","name","setName","height","setHeight","homeworld","setHomeworld","affiliations","setAffiliations","image","setImage","React","createElement","src","alt","length","map","affiliation","index","key","type","onClick","async","randomNumber","Math","floor","random","url","concat","response","fetch","ok","Error","data","json","console","log","error","className","App","reportWebVitals","onPerfEntry","Function","onCLS","onFID","onFCP","onLCP","onTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"yIAGA,MAAMA,EAAWA,KACf,MAAOC,EAAiBC,GAAsBC,oBAAS,IAChDC,EAAMC,GAAWF,mBAAS,OAC1BG,EAAQC,GAAaJ,mBAAS,OAC9BK,EAAWC,GAAgBN,mBAAS,OACpCO,EAAcC,GAAmBR,mBAAS,KAC1CS,EAAOC,GAAYV,mBAAS,MAyBnC,OACEW,IAAAC,cAAA,WACGd,GACCa,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAKX,GACLU,IAAAC,cAAA,SAAIT,EAAO,OACXQ,IAAAC,cAAA,SAAG,cAAYP,GACdI,GAASE,IAAAC,cAAA,OAAKC,IAAKJ,EAAOK,IAAKb,IAChCU,IAAAC,cAAA,UACGL,EAAaQ,OAAS,EACrBR,EAAaS,IAAI,CAACC,EAAaC,IAC7BP,IAAAC,cAAA,MAAIO,IAAKD,GAAQD,IAGnBN,IAAAC,cAAA,UAAI,+BAKZD,IAAAC,cAAA,UACEQ,KAAK,SACLC,QA5CkBC,UACtB,MAAMC,EAAeC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAChDC,EAAG,gDAAAC,OAAmDL,EAAY,SACxE,IACE,MAAMM,QAAiBC,MAAMH,GAC7B,IAAKE,EAASE,GACZ,MAAM,IAAIC,MAAM,+BAElB,MAAMC,QAAaJ,EAASK,OAC5BC,QAAQC,IAAI,kBAAmBH,GAC/BE,QAAQC,IAAI,aAAcH,EAAKxB,OAE/BP,EAAQ+B,EAAKhC,MACbG,EAAU6B,EAAK9B,QACfG,EAAa2B,EAAK5B,WAAa,WAC/BG,EAAgByB,EAAK1B,cAAgB,IACrCG,EAASuB,EAAKxB,OACdV,GAAmB,GACnB,MAAOsC,GACPF,QAAQE,MAAM,eAAgBA,KA0B5BC,UAAU,OACX,yBAiBQC,MAVf,WACE,OACE5B,IAAAC,cAAA,OAAK0B,UAAU,OACb3B,IAAAC,cAAA,UAAQ0B,UAAU,cAChB3B,IAAAC,cAACf,EAAQ,gBCxDF2C,MAVUC,IACnBA,GAAeA,aAAuBC,WACxCC,YAAMF,GACNG,YAAMH,GACNI,YAAMJ,GACNK,YAAML,GACNM,YAAON,KCFEO,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHzC,IAAAC,cAACD,IAAM0C,WAAU,KACf1C,IAAAC,cAAC2B,EAAG,QAORC,EAAgBL,QAAQC","file":"static/js/main.57ae8559.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst StarWars = () => {\n  const [loadedCharacter, setLoadedCharacter] = useState(false);\n  const [name, setName] = useState(null);\n  const [height, setHeight] = useState(null);\n  const [homeworld, setHomeworld] = useState(null);\n  const [affiliations, setAffiliations] = useState([]);\n  const [image, setImage] = useState(null);\n\n  const getNewCharacter = async () => {\n    const randomNumber = Math.floor(Math.random() * 88) + 1; // Adjusted for the new API range\n    const url = `https://akabab.github.io/starwars-api/api/id/${randomNumber}.json`;\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log('Character data:', data);\n      console.log('Image URL:', data.image);\n\n      setName(data.name);\n      setHeight(data.height);\n      setHomeworld(data.homeworld || 'Unknown'); // Handle missing homeworld\n      setAffiliations(data.affiliations || []); // Handle missing affiliations\n      setImage(data.image);\n      setLoadedCharacter(true);\n    } catch (error) {\n      console.error('Fetch error:', error);\n    }\n  };\n\n  return (\n    <div>\n      {loadedCharacter && (\n        <div>\n          <h1>{name}</h1>\n          <p>{height} cm</p>\n          <p>Homeworld: {homeworld}</p>\n          {image && <img src={image} alt={name} />}\n          <ul>\n            {affiliations.length > 0 ? (\n              affiliations.map((affiliation, index) => (\n                <li key={index}>{affiliation}</li>\n              ))\n            ) : (\n              <li>No affiliations available</li>\n            )}\n          </ul>\n        </div>\n      )}\n      <button\n        type=\"button\"\n        onClick={getNewCharacter}\n        className=\"btn\"\n      >\n        Randomize Character\n      </button>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <StarWars />\n      </header>\n    </div>\n  );\n}\n\nexport default App;","import { onCLS, onFID, onFCP, onLCP, onTTFB } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    onCLS(onPerfEntry);\n    onFID(onPerfEntry);\n    onFCP(onPerfEntry);\n    onLCP(onPerfEntry);\n    onTTFB(onPerfEntry);\n  }\n};\n\nexport default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);"],"sourceRoot":""}